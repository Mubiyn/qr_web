import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import '../constants/app_constants.dart';
import '../providers/auth_provider.dart';
import '../providers/payment_provider.dart';
import '../providers/rental_provider.dart';
import '../widgets/loading_overlay.dart';

class PaymentScreen extends StatefulWidget {
  final String stationId;

  const PaymentScreen({super.key, required this.stationId});

  @override
  State<PaymentScreen> createState() => _PaymentScreenState();
}

class _PaymentScreenState extends State<PaymentScreen> {
  // Card form controllers
  final _cardNumberController = TextEditingController();
  final _nameController = TextEditingController();
  final _expiryController = TextEditingController();
  final _cvvController = TextEditingController();

  @override
  void dispose() {
    _cardNumberController.dispose();
    _nameController.dispose();
    _expiryController.dispose();
    _cvvController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();
    // Use addPostFrameCallback to avoid setState during build
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeScreen();
    });
  }

  Future<void> _initializeScreen() async {
    final authProvider = context.read<AuthProvider>();
    final paymentProvider = context.read<PaymentProvider>();
    final rentalProvider = context.read<RentalProvider>();

    // Set station ID
    rentalProvider.setStationId(widget.stationId);

    // Initialize account and payment
    if (!authProvider.isAuthenticated) {
      await authProvider.generateAccount();
    }

    await paymentProvider.initializeBraintree();
  }

  Future<void> _handlePaymentInModal(BuildContext modalContext) async {
    final paymentProvider = context.read<PaymentProvider>();
    final rentalProvider = context.read<RentalProvider>();

    // Simulate payment token (in real app, this would come from payment SDK)
    final paymentToken = _generateMockPaymentToken();

    // Process payment
    final paymentSuccess = await paymentProvider.processPayment(paymentToken: paymentToken);

    if (paymentSuccess && mounted) {
      // After successful payment, rent the power bank
      final rentalSuccess = await rentalProvider.rentPowerBank();

      if (rentalSuccess && mounted) {
        // Pop the modal first, then navigate
        if (!modalContext.mounted) return;
        Navigator.pop(modalContext);
        context.go('/success');
      } else {
        if (!modalContext.mounted) return;
        Navigator.pop(modalContext);
        _showErrorDialog('Не удалось арендовать PowerBank');
      }
    } else {
      if (!modalContext.mounted) return;
      Navigator.pop(modalContext);
      _showErrorDialog(paymentProvider.error ?? 'Ошибка оплаты');
    }
  }

  String _generateMockPaymentToken() {
    // In a real app, this would be generated by the payment SDK
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    return 'mock_payment_token_$timestamp';
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ошибка'),
        content: Text(message),
        actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('OK'))],
      ),
    );
  }

  // Card validation methods
  bool _isCardNumberValid(String cardNumber) {
    final cleanNumber = cardNumber.replaceAll(' ', '');
    return cleanNumber.length >= 15 && cleanNumber.length <= 19; // Support both 15-19 digit cards
  }

  bool _isExpiryValid(String expiry) {
    if (expiry.length != 5) return false;
    final parts = expiry.split('/');
    if (parts.length != 2) return false;

    final month = int.tryParse(parts[0]);
    final year = int.tryParse('20${parts[1]}');

    if (month == null || year == null) return false;
    if (month < 1 || month > 12) return false;

    final now = DateTime.now();
    final currentYear = now.year;
    final currentMonth = now.month;

    // Card is valid if it's the current month/year or later
    return year > currentYear || (year == currentYear && month >= currentMonth);
  }

  bool _isCvvValid(String cvv) {
    return cvv.length >= 3 && cvv.length <= 4;
  }

  bool _isNameValid(String name) {
    return name.trim().isNotEmpty && name.trim().length >= 2;
  }

  bool _areAllFieldsValid() {
    return _isCardNumberValid(_cardNumberController.text) &&
        _isNameValid(_nameController.text) &&
        _isExpiryValid(_expiryController.text) &&
        _isCvvValid(_cvvController.text);
  }

  // Input formatters
  TextInputFormatter get _cardNumberFormatter {
    return TextInputFormatter.withFunction((oldValue, newValue) {
      final text = newValue.text.replaceAll(RegExp(r'\s+\b|\b\s'), '');
      final buffer = StringBuffer();

      for (int i = 0; i < text.length; i++) {
        buffer.write(text[i]);
        final nonZeroIndex = i + 1;
        if (nonZeroIndex % 4 == 0 && nonZeroIndex != text.length) {
          buffer.write(' ');
        }
      }

      final string = buffer.toString();
      return newValue.copyWith(
        text: string,
        selection: TextSelection.collapsed(offset: string.length),
      );
    });
  }

  TextInputFormatter get _expiryFormatter {
    return TextInputFormatter.withFunction((oldValue, newValue) {
      final text = newValue.text.replaceAll('/', '');
      final buffer = StringBuffer();

      for (int i = 0; i < text.length && i < 4; i++) {
        if (i == 2) buffer.write('/');
        buffer.write(text[i]);
      }

      final string = buffer.toString();
      return newValue.copyWith(
        text: string,
        selection: TextSelection.collapsed(offset: string.length),
      );
    });
  }

  void _showApplePayModal() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.grey,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.7,
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            // Header with close button
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Row(
                  children: [
                    Icon(Icons.apple, size: 24),
                    Text('Pay', style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600)),
                  ],
                ),
                GestureDetector(
                  onTap: () => Navigator.pop(context),
                  child: Container(
                    padding: const EdgeInsets.all(4),
                    child: const Icon(Icons.close, size: 24, color: Colors.grey),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 32),

            // Apple Card section
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                color: Colors.grey.shade50,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Container(
                            width: 30,
                            height: 18,
                            decoration: BoxDecoration(
                              gradient: const LinearGradient(
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                                colors: [
                                  Color(0xFFFFB74D), // Orange
                                  Color(0xFFFF9800), // Deeper orange
                                  Color(0xFFE91E63), // Pink
                                ],
                              ),
                            ),
                          ),
                          const Text(
                            ' Apple Card',
                            style: TextStyle(
                              color: Colors.black,
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        'T0880 Malibu Point Malibu Cal...',
                        style: TextStyle(color: Colors.black, fontSize: 12),
                      ),
                      const SizedBox(height: 8),
                      const Text(
                        '•••• 1234',
                        style: TextStyle(
                          color: Colors.black,
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                  Icon(Icons.chevron_right, color: Colors.black.withValues(alpha: .8), size: 24),
                ],
              ),
            ),

            const SizedBox(height: 16),

            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade50,
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Text(
                '\$4.99',
                style: TextStyle(color: Colors.black, fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ),
            const SizedBox(height: 16),

            // Account information
            Container(
              padding: const EdgeInsets.all(8),
              width: double.infinity,
              decoration: BoxDecoration(
                color: Colors.grey.shade50,
                borderRadius: BorderRadius.circular(12),
              ),

              child: const Text(
                'Account: username@icloud.com',
                style: TextStyle(color: Colors.grey, fontSize: 14),
              ),
            ),

            const SizedBox(height: 16),

            // Pay Recharge section
            Consumer3<AuthProvider, PaymentProvider, RentalProvider>(
              builder: (context, authProvider, paymentProvider, rentalProvider, child) {
                final isLoading =
                    authProvider.isLoading ||
                    paymentProvider.isLoading ||
                    paymentProvider.isProcessing ||
                    rentalProvider.isLoading ||
                    rentalProvider.isRentalInProgress;

                return GestureDetector(
                  onTap: isLoading
                      ? null
                      : () async {
                          await _handlePaymentInModal(context);
                        },
                  child: Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: isLoading ? Colors.grey.shade200 : Colors.grey.shade50,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          spacing: 5,
                          children: [
                            const Text(
                              'Pay Recharge',
                              style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                            ),
                            const Text(
                              '\$4.99',
                              style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                            ),
                          ],
                        ),
                        if (isLoading)
                          const CupertinoActivityIndicator(radius: 10)
                        else
                          Icon(Icons.chevron_right, color: Colors.grey.shade600, size: 20),
                      ],
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  void _showCardDetailsModal() {
    // Clear previous input
    _cardNumberController.clear();
    _nameController.clear();
    _expiryController.clear();
    _cvvController.clear();

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.white,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (modalContext) => StatefulBuilder(
        builder: (context, setModalState) => Padding(
          padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
          child: Container(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Handle bar
                Container(
                  width: 40,
                  height: 4,
                  decoration: BoxDecoration(
                    color: Colors.grey.shade300,
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),

                const SizedBox(height: 24),

                // Title
                const Text(
                  'Enter your card details',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.black),
                ),

                const SizedBox(height: 32),

                // Card icon and text
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Row(
                    children: [
                      Icon(Icons.credit_card, color: Colors.black, size: 24),
                      SizedBox(width: 12),
                      Text(
                        'Debit or credit card',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.black,
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 20),

                // Card number field
                Container(
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: TextField(
                    controller: _cardNumberController,
                    onChanged: (_) => setModalState(() {}),
                    inputFormatters: [
                      FilteringTextInputFormatter.digitsOnly,
                      LengthLimitingTextInputFormatter(19), // 16 digits + 3 spaces
                      _cardNumberFormatter,
                    ],
                    decoration: InputDecoration(
                      hintText: 'Card number',
                      hintStyle: const TextStyle(color: Colors.grey),
                      border: InputBorder.none,
                      contentPadding: const EdgeInsets.all(16),
                      suffixIcon: _isCardNumberValid(_cardNumberController.text)
                          ? const Icon(Icons.check_circle, color: Colors.green, size: 20)
                          : null,
                    ),
                    keyboardType: TextInputType.number,
                  ),
                ),

                const SizedBox(height: 12),

                // Name field
                Container(
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: TextField(
                    controller: _nameController,
                    onChanged: (_) => setModalState(() {}),
                    inputFormatters: [LengthLimitingTextInputFormatter(50)],
                    decoration: InputDecoration(
                      hintText: 'Name',
                      hintStyle: const TextStyle(color: Colors.grey),
                      border: InputBorder.none,
                      contentPadding: const EdgeInsets.all(16),
                      suffixIcon: _isNameValid(_nameController.text)
                          ? const Icon(Icons.check_circle, color: Colors.green, size: 20)
                          : null,
                    ),
                    keyboardType: TextInputType.name,
                    textCapitalization: TextCapitalization.words,
                  ),
                ),

                const SizedBox(height: 12),

                // Expiry and CVV row
                Row(
                  children: [
                    // Month/Year
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.grey.shade50,
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: TextField(
                          controller: _expiryController,
                          onChanged: (_) => setModalState(() {}),
                          inputFormatters: [
                            FilteringTextInputFormatter.digitsOnly,
                            LengthLimitingTextInputFormatter(4),
                            _expiryFormatter,
                          ],
                          decoration: InputDecoration(
                            hintText: 'MM/YY',
                            hintStyle: const TextStyle(color: Colors.grey),
                            border: InputBorder.none,
                            contentPadding: const EdgeInsets.all(16),
                            suffixIcon: _isExpiryValid(_expiryController.text)
                                ? const Icon(Icons.check_circle, color: Colors.green, size: 20)
                                : null,
                          ),
                          keyboardType: TextInputType.number,
                        ),
                      ),
                    ),

                    const SizedBox(width: 12),

                    // CVV with info icon
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.grey.shade50,
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: TextField(
                          controller: _cvvController,
                          onChanged: (_) => setModalState(() {}),
                          inputFormatters: [
                            FilteringTextInputFormatter.digitsOnly,
                            LengthLimitingTextInputFormatter(4),
                          ],
                          decoration: InputDecoration(
                            hintText: 'CVV',
                            hintStyle: const TextStyle(color: Colors.grey),
                            border: InputBorder.none,
                            contentPadding: const EdgeInsets.all(16),
                            suffixIcon: _isCvvValid(_cvvController.text)
                                ? const Icon(Icons.check_circle, color: Colors.green, size: 20)
                                : Container(
                                    margin: const EdgeInsets.only(right: 12),
                                    child: Icon(
                                      Icons.info_outline,
                                      color: Colors.grey.shade600,
                                      size: 20,
                                    ),
                                  ),
                          ),
                          keyboardType: TextInputType.number,
                          obscureText: true,
                        ),
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 32),

                // Continue Button
                Consumer3<AuthProvider, PaymentProvider, RentalProvider>(
                  builder: (context, authProvider, paymentProvider, rentalProvider, child) {
                    final isLoading =
                        authProvider.isLoading ||
                        paymentProvider.isLoading ||
                        paymentProvider.isProcessing ||
                        rentalProvider.isLoading ||
                        rentalProvider.isRentalInProgress;

                    final allFieldsValid = _areAllFieldsValid();

                    return SizedBox(
                      width: double.infinity,
                      height: 56,
                      child: CupertinoButton(
                        onPressed: (isLoading || !allFieldsValid)
                            ? null
                            : () async {
                                await _handlePaymentInModal(modalContext);
                              },
                        color: (!allFieldsValid || isLoading)
                            ? Colors.grey.shade300
                            : const Color(0xFF8BC34A),
                        child: isLoading
                            ? const CupertinoActivityIndicator(color: Colors.white, radius: 12)
                            : const Text(
                                'Continue',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                      ),
                    );
                  },
                ),

                const SizedBox(height: 24),
              ],
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.close, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Consumer3<AuthProvider, PaymentProvider, RentalProvider>(
        builder: (context, authProvider, paymentProvider, rentalProvider, child) {
          final isLoading =
              authProvider.isLoading || paymentProvider.isLoading || rentalProvider.isLoading;

          return LoadingOverlay(
            isLoading: isLoading || paymentProvider.isProcessing,
            message: _getLoadingMessage(paymentProvider, rentalProvider),
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Recharge.city branding
                  Row(
                    children: [
                      Container(
                        width: 20,
                        height: 20,
                        decoration: BoxDecoration(
                          color: const Color(0xFF8BC34A), // Green color
                          borderRadius: BorderRadius.circular(4),
                        ),
                      ),
                      const SizedBox(width: 8),
                      const Text(
                        'recharge.city',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Color(0xFF8BC34A),
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 32),

                  // Title
                  const Text(
                    'Rent a Charger',
                    style: TextStyle(
                      fontSize: 28,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),

                  const SizedBox(height: 16),

                  // Pricing
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      const Text(
                        '\$4.99',
                        style: TextStyle(
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                      const SizedBox(width: 12),
                      const Text(
                        '\$15.99',
                        style: TextStyle(
                          fontSize: 20,
                          color: Colors.grey,
                          decoration: TextDecoration.lineThrough,
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 48),

                  // Select Payment Method
                  const Text(
                    'Select Payment Method',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                      color: Colors.black,
                    ),
                  ),

                  const SizedBox(height: 16),

                  // Apple Pay Button
                  GestureDetector(
                    onTap: () {
                      paymentProvider.selectPaymentType(PaymentType.applePay);
                      _showApplePayModal();
                    },
                    child: Container(
                      width: double.infinity,
                      height: 56,
                      decoration: BoxDecoration(
                        color: Colors.black,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Center(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.apple, color: Colors.white, size: 24),
                            SizedBox(width: 8),
                            Text(
                              'Pay',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),

                  const SizedBox(height: 12),

                  // Card Payment Option
                  GestureDetector(
                    onTap: () {
                      paymentProvider.selectPaymentType(PaymentType.card);
                      _showCardDetailsModal();
                    },
                    child: Container(
                      width: double.infinity,
                      height: 56,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.grey.shade300),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        child: Row(
                          children: [
                            const Icon(Icons.credit_card, color: Colors.black, size: 24),
                            const SizedBox(width: 12),
                            const Text(
                              'Debit or credit card',
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            const Spacer(),
                            const Icon(Icons.chevron_right, color: Colors.black, size: 24),
                          ],
                        ),
                      ),
                    ),
                  ),

                  const Spacer(),

                  // Disclaimer text
                  const Text(
                    'If the battery is not returned within 14 days or is lost, a \$99 fee will apply.',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                    textAlign: TextAlign.center,
                  ),

                  const SizedBox(height: 16),

                  // Contact support
                  Center(
                    child: GestureDetector(
                      onTap: () {
                        // Add contact support functionality
                      },
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Text(
                            'Nothing happened? ',
                            style: TextStyle(fontSize: 14, color: Colors.grey),
                          ),
                          const Text(
                            'Contact support',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey,
                              decoration: TextDecoration.underline,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),

                  const SizedBox(height: 32),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  String _getLoadingMessage(PaymentProvider paymentProvider, RentalProvider rentalProvider) {
    if (paymentProvider.isProcessing) {
      return AppConstants.processing;
    }

    if (rentalProvider.rentalState == RentalState.requesting) {
      return 'Создание аренды...';
    }

    if (rentalProvider.rentalState == RentalState.dispensing) {
      return 'Выдача PowerBank...';
    }

    return 'Загрузка...';
  }
}
